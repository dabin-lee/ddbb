
- 리터럴이란? 변수 및 상수에 지정되는 값 자체를 일컫는다.(객체에서 파생되는 오브젝트+ 한번만 쓰는... 이런 뜻을 가지고 있다)
    - 리터럴 : 코드상에서 데이터를 표현하는 방식 자체
```
var aaa = 2; //숫자
var bbb = "2"; //문자
var bbb = '2'; //얘도 문자
var ccc = true; //얘는 불린
var ddd = [1, 2, 3, 4]; //얘는 배열
var eee = { p1 : 2, p2 : ‘2’ }; //얘는 객체
var fff = null; //null
var ggg = undefined; //undefined
var hhh = function(){ alert('ㅋㅋㅋ'); } //얘는 함수!!
```
생성자란? 역할 : 객체를 생성할 때 항상 실행되는 것으로, 객체를 초기화해주기 위해 맨 처음 실행되는 메소드이다.


1. 생성자함수 : var square = new Function("x", "return x*x"); (선언적 방식 보다는 일반 익명함수를 만드는 스타일과 비슷)
2. 함수 리터럴 : var square = function(x) { return x*x }
    - 함수를 리터럴(직접 입력한 문자열 처럼 보임)로써 만들고,
    . 이렇게 정의된 함수를 변수에 할당함으로써,
    . 함수를 생성하는 것


1. 객체 생성자 3가지 방법 - 자바스크립트에 객체 정의 방법에는 리터럴 표기와 생성자 함수가 있다.


- 객체의 속성값은 문자열, 숫자, 객체, 함수여도 된다.

1) 리터럴(변수에 넣는 변하지 않는 데이터) 객체
- 중괄호를 안에 프로퍼티(속성)와 값(value)를 입력하여 객체를 생성하는 방식
- 함수 또한 객체로 취급이 되게 때문에 프로퍼티로 사용 가능하다.
```
var object = {
    name : "name", // 문자열
    number : 6,    // 숫자
    func : function() { // 함수
        return null;
    },
    data : {            // 객체
        property : 1;
    }
};
```
    1-1) 리터럴 객체 속성 접근 방법 1
    - 해당 객체에 접근하여 다른 값을 대입하고 사용할 수 있다.
        ```
        object.name = "kim";
        object.number = 1;
        object.func = func();
        object.data.property = 2;
        ```
    1-2) 리터럴 객체 속성 접근 방법 2
    - 배열 처럼 대괄호 안에 프로퍼티를 적어서 접근하는 것도 가능
        ```
        object.[name] = "kim";
        object.[number] = 1;
        object.[func] = func();
        object.[data.[property]] = 2;
        ```

3) new Object() 생성자
- new Object() 와 같이 명시할 경우, 새로운 Object의 빈 객체를 반환하는 거죠.



3) 생성자 함수

- 객체 생성자 -> NEW를 붙이고 함수처럼 호출했음.
- new 키워드를 이용해서 인스턴스를 생성하여 객체를 생성
- 일반 함수와 다르게 자신을 프로토타입으로 지정하고 그 객체를 리턴한다.
```
function NewObj(name, number) {
  this.name = name;
  this.number = number;
}
// 객체 생성
var object1 = new NewObj("name", 6);
var object2 = new NewObj("string", 1);


console.log(object1);
```




2. 객체와 인스턴스
- 인스턴스란, 예로 우리는 하나의 청사진이 되는 클래스를 정의하면 이 클래스에서 각각 구별이 되는 인스턴스를 얼마든지 만들어 낼 수 있는 것이다.
- ex)사람이라는 클래스가 있다면 세계 50억명 이상의 각 개인들의 인스턴스가 있는 것이다. 즉 인스턴스란 클래스의 정의를 통해 만들어진 객체를 의미하는 것이다.
- 객체는 클래스의 타입으로 선언되었을 때를 의미하는 것이고, 그 객체가 메모리에 할당되어 실제 사용될 때를 인스턴스라고 하는 것이다.
즉, 인스턴스는 추상화 개념 또는 클래스 객체, 컴퓨터 프로세스 등과 같은 템플릿이 실제 구현된 것이다.
- 출처: https://cooablue.tistory.com/entry/객체Object와-인스턴스Instance [우꺄꺄꺄?]


- 자바스크립트식 객체 지향 프로그래밍(OOP, Object Oriented Programming)



1. 객체 생성자 함수 생성 (object constructor function) - function 함수명(매개변수){} 형태
- 함수명은 소문자로 시작해도 무방하지만, 대문자로 시작하는 게
-
function Person(name){
    this.name = name;
    this.showName = function(){
        console.log(name);
    }
}